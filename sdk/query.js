// query.js
// Query functions

/**
 * Type -102006 Protocol is used to get the amount of btc 
 * that needs to be recharged in the channel
 * 
 * @param callback 
 */
function getAmountOfRechargeBTC(callback) {
    obdApi.getAmountOfRechargeBTC(callback);
}

/**
 * Type -103150 Protocol is used to get get all of channels.
 */
function getMyChannels() {
    obdApi.getMyChannels(function(e) {
        console.info('SDK: -103150 getMyChannels = ' + JSON.stringify(e));
    });
}

/**
 * Type -103154 Protocol is used to get detail data of a channel from a channel ID.
 * @param channel_id 
 */
function getChannelDetailFromChannelID(channel_id) {
    obdApi.getChannelDetailFromChannelID(channel_id, function(e) {
        console.info('SDK: -103154 getChannelDetailFromChannelID = ' + JSON.stringify(e));
    });
}

/**
 * Type -103155 Protocol is used to get detail data of a channel from a database ID.
 * @param id number
 */
function getChannelDetailFromDatabaseID(id) {
    obdApi.getChannelDetailFromDatabaseID(Number(id), function(e) {
        console.info('SDK: -103155 getChannelDetailFromDatabaseID = ' + JSON.stringify(e));
    });
}

/**
 * Type -103200 Protocol is used to get a list of commitment transactions in one channel.
 * @param channel_id 
 */
function getAllCommitmentTransactions(channel_id) {
    obdApi.getItemsByChannelId(channel_id, function(e) {
        console.info('SDK: -103200 GetAllCommitmentTransactions = ' + JSON.stringify(e));
    });
}

/**
 * Type -103203 Protocol is used to get a latest commitment transaction.
 * @param channel_id 
 */
function getLatestCommitmentTransaction(channel_id) {
    obdApi.getLatestCommitmentTransaction(channel_id, function(e) {
        console.info('SDK: -103203 getLatestCommitmentTransaction = ' + JSON.stringify(e));
    });
}

/**
 * Type -103204 Protocol is used to get a latest Revockable Delivery transaction.
 * @param channel_id 
 */
function getLatestRevockableDeliveryTransaction(channel_id) {
    obdApi.getLatestRevockableDeliveryTransaction(channel_id, function(e) {
        console.info('SDK: -103204 getLatestRevockableDeliveryTransaction = ' + JSON.stringify(e));
    });
}

/**
 * Type -103205 Protocol is used to get a latest Breach Remedy transaction.
 * @param channel_id 
 */
function getLatestBreachRemedyTransaction(channel_id) {
    obdApi.getLatestBreachRemedyTransaction(channel_id, function(e) {
        console.info('SDK: -103205 getLatestBreachRemedyTransaction = ' + JSON.stringify(e));
    });
}

/**
 * Type -103207 Protocol is used to get all of Revockable Delivery transactions.
 * @param channel_id 
 */
function getAllRevockableDeliveryTransactions(channel_id) {
    obdApi.getAllRevockableDeliveryTransactions(channel_id, function(e) {
        console.info('SDK: -103207 getAllRevockableDeliveryTransactions = ' + JSON.stringify(e));
    });
}

/**
 * Type -103208 Protocol is used to get all of Breach Remedy transactions.
 * @param channel_id 
 */
function getAllBreachRemedyTransactions(channel_id) {
    obdApi.getAllBreachRemedyTransactions(channel_id, function(e) {
        console.info('SDK: -103208 getAllBreachRemedyTransactions = ' + JSON.stringify(e));
    });
}

/**
 * getAddressInfo is used to get detail info of a address generated by mnemonic words.
 * @param mnemonic 
 * @param index 
 * @param netType true: testnet  false: mainnet
 */
function getAddressInfo(mnemonic, index, netType) {
    let result;
    try {
        // True: testnet  False: mainnet
        result = btctool.generateWalletInfo(mnemonic, index, netType);
        console.info('SDK: getAddressInfo = ' + JSON.stringify(result));
    } catch (error) {
        // alert('Please input a valid index of address.');
        return '';
    }

    if (!result.status) { // status = false
        // alert('Please input a valid index of address.');
        return '';
    }

    return result;
}

/**
 * Type -102112 Protocol is used to get all omni assets details of an address.
 * @param address 
 */
function getAllBalancesForAddress(address) {
    obdApi.getAllBalancesForAddress(address, function(e) {
        console.info('SDK: -102112 getAllBalancesForAddress = ' + JSON.stringify(e));
    });
}

/**
 * Type -102117 Protocol is used to list all tokens or smart properties.
 * This call may take a long time, it may return a large amount of data, 
 * please use it with caution.
 */
function listProperties() {
    obdApi.listProperties(function(e) {
        console.info('SDK: -102117 listProperties = ' + JSON.stringify(e));
    });
}

/**
 * Type -102118 Protocol is used to get detailed information about an Omni transaction.
 * @param txid 
 */
function getTransaction(txid) {
    obdApi.getTransaction(txid, function(e) {
        console.info('SDK: -102118 getTransaction = ' + JSON.stringify(e));
    });
}

/**
 * Type -102119 Protocol is used to get omni asset details by asset id (Property Id) .
 * @param propertyId 
 */
function getProperty(propertyId) {
    obdApi.getProperty(propertyId, function(e) {
        console.info('SDK: -102119 getProperty = ' + JSON.stringify(e));
    });
}
